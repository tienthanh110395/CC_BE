package com.viettel.etc.services.impl;import com.viettel.etc.dto.ActionAuditDTO;import com.viettel.etc.dto.TicketProcessShareDTO;import com.viettel.etc.repositories.TicketProcessShareRepository;import com.viettel.etc.repositories.TicketRepository;import com.viettel.etc.repositories.tables.TicketSiteUserRepositoryJPA;import com.viettel.etc.repositories.tables.TicketSmsMailPushRepositoryJPA;import com.viettel.etc.repositories.tables.entities.*;import com.viettel.etc.services.ActionAuditService;import com.viettel.etc.services.TicketProcessShareService;import com.viettel.etc.services.tables.TicketProcessShareDetailServiceJPA;import com.viettel.etc.services.tables.TicketProcessShareServiceJPA;import com.viettel.etc.services.tables.TicketServiceJPA;import com.viettel.etc.utils.FnCommon;import com.viettel.etc.utils.exceptions.EtcException;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.core.Authentication;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.sql.Date;import java.util.ArrayList;import java.util.List;import java.util.Optional;/** * Autogen class: * * @author ToolGen * @date Tue Aug 31 13:49:53 ICT 2021 */@Servicepublic class TicketProcessShareServiceImpl implements TicketProcessShareService {    @Autowired    TicketProcessShareRepository ticketProcessShareRepository;    @Autowired    TicketServiceJPA ticketServiceJPA;    @Autowired    TicketRepository ticketRepository;    @Autowired    TicketProcessShareServiceJPA ticketProcessShareServiceJPA;    @Autowired    TicketProcessShareDetailServiceJPA ticketProcessShareDetailServiceJPA;    @Autowired    SMSServiceImpl smsService;    @Autowired    TicketSiteUserRepositoryJPA ticketSiteUserRepositoryJPA;    @Autowired    TicketSmsMailPushRepositoryJPA ticketSmsMailPushRepositoryJPA;    @Value("${sms.user.receive.ticket}")    String smsReceiveTicket;    @Autowired    ActionAuditService actionAuditService;    /**     * Lay thong tin share viec     *     * @param itemParamsEntity params client     * @return     */    @Override    public Object getTicketProcessShare(TicketProcessShareDTO itemParamsEntity) {        return ticketProcessShareRepository.getTicketProcessShare(itemParamsEntity);    }    /**     * Luu thong tin share viec     *     * @param req     * @return     */    @Override    @Transactional    public Object saveTicketProcessShare(TicketProcessShareDTO req, Authentication authentication) {        boolean isTicketValid = ticketProcessShareDetailServiceJPA.existsByTicketIdAndProcessUserIsNotNull(req.getTicketIds());        if (!isTicketValid) {            throw new EtcException("Danh sách ticket truyền vào không hợp lệ do tồn tại ticket đã được giao việc");        }        int totalTicket = req.getTicketIds().size();        int totalProcessUser = req.getProcessUsers().size();        if (totalProcessUser == 0) {            throw new EtcException("Số lượng người xử lý truyền vào không hợp lệ");        }        if (totalTicket < totalProcessUser) {            throw new EtcException("Số lượng người xử lý truyền vào lớn hơn số lượng phản ánh để phân chia giao việc");        }        int numberOfOneUser = totalTicket / totalProcessUser;        int indexUser = 0, i = 0, total = 0;        List<TicketSmsMailPushEntity> ticketSmsMailPushEntities = new ArrayList<>();        List<TicketEntity> ticketEntities = new ArrayList<>();        List<TicketProcessShareDetailEntity> ticketProcessShareDetailEntities = new ArrayList<>();        req.setAssignUser(FnCommon.getUserLogin(authentication));        ActionAuditDTO actionAuditDTO = new ActionAuditDTO();        actionAuditDTO.setActTypeId(req.getActTypeId());        String actionName;        for (Long ticketId : req.getTicketIds()) {            TicketEntity oldTicketEntity = null, ticketEntity = null;            Optional<TicketEntity> optionalTicketEntity = ticketServiceJPA.findById(ticketId);            if (!optionalTicketEntity.isPresent()) continue;            else {                ticketEntity = optionalTicketEntity.get();                ModelMapper modelMapper = new ModelMapper();                oldTicketEntity = modelMapper.map(ticketEntity, TicketEntity.class);            }            String processUser = req.getProcessUsers().get(indexUser);            if (total / (totalProcessUser * numberOfOneUser)  > 0) {                if (TicketProcessShareEntity.AssignType.OFFSET.value.equals(req.getAssignType())) {                    processUser = req.getProcessUsers().get(req.getProcessUsers().size() - 1);                } else {                    break;                }            }            actionAuditDTO.setContractId(ticketEntity.getContractId());            actionAuditDTO.setTicketStatus(ticketEntity.getStatus());            actionAuditDTO.setTicketId(ticketId);            ticketEntity.setProcessUser(processUser);            ticketEntities.add(ticketEntity);            /* Luu log */            actionName = ActionAuditDetailEntity.ActionName.UPDATE.value;            ActionAuditEntity actionAuditEntity = actionAuditService.saveActAudit(authentication, actionAuditDTO);            actionAuditService.saveActAuditDetail(actionAuditEntity.getActionAuditId(), oldTicketEntity, ticketEntity, ticketEntity.getTicketId(), actionName);            TicketProcessShareEntity ticketProcessShareEntity = req.toTicketProcessShareEntity();            ticketProcessShareServiceJPA.save(ticketProcessShareEntity);            /* Luu log */            actionName = ActionAuditDetailEntity.ActionName.INSERT.value;            actionAuditService.saveActAuditDetail(actionAuditEntity.getActionAuditId(), null, ticketProcessShareEntity, ticketProcessShareEntity.getTicketProcessShareId(), actionName);            TicketProcessShareDetailEntity ticketProcessShareDetailEntity = req.toTicketProcessShareDetailEntity(ticketProcessShareEntity, ticketId, processUser);            ticketProcessShareDetailEntity.setTicketProcessShareDetailId(ticketProcessShareDetailServiceJPA.getNextValSequenceSerial());            ticketProcessShareDetailEntity.setTicketProcessShareId(ticketProcessShareEntity.getTicketProcessShareId());            ticketProcessShareDetailEntities.add(ticketProcessShareDetailEntity);            /* Luu log */            actionName = ActionAuditDetailEntity.ActionName.INSERT.value;            actionAuditService.saveActAuditDetail(actionAuditEntity.getActionAuditId(), null, ticketProcessShareDetailEntity, ticketProcessShareDetailEntity.getTicketProcessShareDetailId(), actionName);            if (req.getIsSms() != null && req.getIsSms()) {                TicketSiteUserEntity ticketSiteUserEntity = ticketSiteUserRepositoryJPA.findByUserNameIgnoreCase(processUser);                if (ticketSiteUserEntity != null && !FnCommon.isNullOrEmpty(ticketSiteUserEntity.getPhone())) {                    String msg = String.format(smsReceiveTicket, req.getAssignUser(), ticketId);                    long status = smsService.sendSMS(ticketSiteUserEntity.getPhone(), msg, authentication);                    TicketSmsMailPushEntity ticketSmsMailPushEntity = req.toTicketSmsMailPushEntity(ticketId, msg, ticketSiteUserEntity.getPhone());                    ticketSmsMailPushEntity.setTicketSmsMailPushId(ticketSmsMailPushRepositoryJPA.getNextValSequenceSerial());                    ticketSmsMailPushEntity.setStatus(status);                    ticketSmsMailPushEntity.setErrorMessage(status == 1L ? "" : "Send sms failed!");                    ticketSmsMailPushEntities.add(ticketSmsMailPushEntity);                    /* Luu log */                    actionName = ActionAuditDetailEntity.ActionName.INSERT.value;                    actionAuditService.saveActAuditDetail(actionAuditEntity.getActionAuditId(), null, ticketSmsMailPushEntity, ticketSmsMailPushEntity.getTicketSmsMailPushId(), actionName);                }            }            i++;            total++;            if (i > numberOfOneUser - 1) {                i = 0;                if(indexUser + 1 < totalProcessUser) indexUser++;            }        }        if (!ticketEntities.isEmpty()) {            ticketServiceJPA.saveAll(ticketEntities);        }        if (!ticketProcessShareDetailEntities.isEmpty()) {            ticketProcessShareDetailServiceJPA.saveAll(ticketProcessShareDetailEntities);        }        if (!ticketSmsMailPushEntities.isEmpty()) {            ticketSmsMailPushRepositoryJPA.saveAll(ticketSmsMailPushEntities);        }        return req;    }}